{"ast":null,"code":"var _jsxFileName = \"/home/mu/JS/desafios/html-incompleto/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { login } from \"./utils\";\nimport \"./index.css\";\nimport { useState } from \"react\";\n\n// Instru√ß√µes:\n// * Voc√™ tem um formul√°rio de login INCOMPLETO\n// * N√£o √© permitido adicionar novos elementos HTML\n// * N√£o √© permitido usar refs\n//\n// Tarefas:\n// todo - O bot√£o de login deve disparar a fun√ß√£o login(), importada no topo deste arquivo, e passar os dados necess√°rios.\n// todo - Desabilite o bot√£o de Login caso o e-mail esteja em branco OU a senha for menor que 6 d√≠gitos.\n// todo - Desabilite o bot√£o de Login equanto voc√™ est√° executando o login.\n// todo - Mostre uma mensagem de erro de login() caso o Login falhe. A mensagem deve ser limpa a cada nova tentativa de Login.\n// todo - Mostre um alerta caso o login seja efetuado com sucesso (javascript alert). Investigue a fun√ß√£o login() para entender como ter sucesso na requisi√ß√£o.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const HandleLogin = () => {\n    const user = {\n      email,\n      password\n    };\n    login(user);\n  };\n  const HandleEmail = () => {};\n  const HandlePassword = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login Form \\uD83D\\uDC1E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"email\",\n          type: \"email\",\n          autoComplete: \"off\",\n          value: email,\n          onChange: handleEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"password\",\n          type: \"password\",\n          value: password,\n          onChange: HandlePassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: HandleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"3B3pqDcVnkT+z/sPK6Z9zQsLP+s=\");\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["login","useState","LoginForm","email","setEmail","password","setPassword","HandleLogin","user","HandleEmail","HandlePassword","handleEmail"],"sources":["/home/mu/JS/desafios/html-incompleto/src/App.jsx"],"sourcesContent":["import { login } from \"./utils\";\nimport \"./index.css\";\nimport { useState } from \"react\";\n\n// Instru√ß√µes:\n// * Voc√™ tem um formul√°rio de login INCOMPLETO\n// * N√£o √© permitido adicionar novos elementos HTML\n// * N√£o √© permitido usar refs\n//\n// Tarefas:\n// todo - O bot√£o de login deve disparar a fun√ß√£o login(), importada no topo deste arquivo, e passar os dados necess√°rios.\n// todo - Desabilite o bot√£o de Login caso o e-mail esteja em branco OU a senha for menor que 6 d√≠gitos.\n// todo - Desabilite o bot√£o de Login equanto voc√™ est√° executando o login.\n// todo - Mostre uma mensagem de erro de login() caso o Login falhe. A mensagem deve ser limpa a cada nova tentativa de Login.\n// todo - Mostre um alerta caso o login seja efetuado com sucesso (javascript alert). Investigue a fun√ß√£o login() para entender como ter sucesso na requisi√ß√£o.\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const HandleLogin = () => {\n    const user = { email, password };\n    login(user);\n  };\n  const HandleEmail = () => {};\n  const HandlePassword = () => {};\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"login-form\">\n        <h1>Login Form üêû</h1>\n        {/* Coloque a mensagem de erro de login na div abaixo. Mostre a div somente se houver uma mensagem de erro. */}\n        <div className=\"errorMessage\"></div>\n        <div className=\"row\">\n          <label htmlFor={\"email\"}>Email</label>\n          <input\n            id={\"email\"}\n            type={\"email\"}\n            autoComplete=\"off\"\n            value={email}\n            onChange={handleEmail}\n          />\n        </div>\n        <div className=\"row\">\n          <label htmlFor={\"password\"}>Password</label>\n          <input\n            id={\"password\"}\n            type={\"password\"}\n            value={password}\n            onChange={HandlePassword}\n          />\n        </div>\n\n        <div className=\"button\">\n          <button onClick={HandleLogin}>Login</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,SAAS;AAC/B,OAAO,aAAa;AACpB,SAASC,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,eAAe,SAASC,SAAS,GAAG;EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMM,WAAW,GAAG,MAAM;IACxB,MAAMC,IAAI,GAAG;MAAEL,KAAK;MAAEE;IAAS,CAAC;IAChCL,KAAK,CAACQ,IAAI,CAAC;EACb,CAAC;EACD,MAAMC,WAAW,GAAG,MAAM,CAAC,CAAC;EAC5B,MAAMC,cAAc,GAAG,MAAM,CAAC,CAAC;EAE/B,oBACE;IAAK,SAAS,EAAC,SAAS;IAAA,uBACtB;MAAK,SAAS,EAAC,YAAY;MAAA,wBACzB;QAAA,UAAI;MAAa;QAAA;QAAA;QAAA;MAAA,QAAK,eAEtB;QAAK,SAAS,EAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QAAO,eACpC;QAAK,SAAS,EAAC,KAAK;QAAA,wBAClB;UAAO,OAAO,EAAE,OAAQ;UAAA,UAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAQ,eACtC;UACE,EAAE,EAAE,OAAQ;UACZ,IAAI,EAAE,OAAQ;UACd,YAAY,EAAC,KAAK;UAClB,KAAK,EAAEP,KAAM;UACb,QAAQ,EAAEQ;QAAY;UAAA;UAAA;UAAA;QAAA,QACtB;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAC,KAAK;QAAA,wBAClB;UAAO,OAAO,EAAE,UAAW;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAQ,eAC5C;UACE,EAAE,EAAE,UAAW;UACf,IAAI,EAAE,UAAW;UACjB,KAAK,EAAEN,QAAS;UAChB,QAAQ,EAAEK;QAAe;UAAA;UAAA;UAAA;QAAA,QACzB;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eAEN;QAAK,SAAS,EAAC,QAAQ;QAAA,uBACrB;UAAQ,OAAO,EAAEH,WAAY;UAAA,UAAC;QAAK;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACxC;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GA3CuBL,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}